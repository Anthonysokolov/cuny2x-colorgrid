{"version":3,"sources":["components/cell.js","components/TableRow.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","fillCell","setState","cellColor","state","fillColor","className","this","onClick","Component","TableRow","addCells","arr","i","numCols","push","Table","fillRows","numRows","align","App","selectColor","event","target","value","addRow","rows","addCol","cols","id","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAoBeA,G,wBAfb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAMRC,SAAW,WACT,EAAKC,SAAS,CAACC,UAAU,EAAKC,MAAMC,aANpC,EAAKD,MAAQ,CACXD,UAAU,aACVE,UAAUL,EAAMK,UAAY,SAJd,E,sEAWhB,OAAQ,wBAAIC,UAAWC,KAAKH,MAAMD,UAAWK,QAASD,KAAKN,e,GAZ5CQ,cCeJC,E,YAfX,WAAYV,GAAO,IAAD,8BACjB,4CAAMA,KAEPW,SAAW,WAEV,IADA,IAAIC,EAAM,GACFC,EAAI,EAAGA,EAAI,EAAKb,MAAMc,QAASD,IAClCD,EAAIG,KAAK,kBAAC,EAAD,CAAMV,UAAW,EAAKL,MAAMK,aAE1C,OAAOO,GARU,E,sEAWjB,OAAO,4BAAKL,KAAKI,gB,GAZCF,aCgBRO,E,YAfb,WAAYhB,GAAO,IAAD,8BACjB,4CAAMA,KAEPiB,SAAW,WAET,IADA,IAAIL,EAAM,GACFC,EAAI,EAAGA,EAAI,EAAKb,MAAMkB,QAASL,IACrCD,EAAIG,KAAK,kBAAC,EAAD,CAAUD,QAAS,EAAKd,MAAMc,QAAST,UAAW,EAAKL,MAAMK,aAExE,OAAOO,GARS,E,sEAWf,OAAO,2BAAOO,MAAM,UAAS,+BAAQZ,KAAKU,iB,GAZ3BR,aCsCLW,E,YApCb,WAAYpB,GAAO,IAAD,8BACjB,4CAAMA,KAOPqB,YAAc,SAACC,GACZ,EAAKpB,SAAS,CAACG,UAAUiB,EAAMC,OAAOC,SATvB,EAWlBC,OAAS,WACN,EAAKvB,SAAS,CAACwB,KAAK,EAAKtB,MAAMsB,KAAK,KAZrB,EAclBC,OAAS,WACN,EAAKzB,SAAS,CAAC0B,KAAK,EAAKxB,MAAMwB,KAAK,KAbtC,EAAKxB,MAAQ,CACTsB,KAAK,EACLE,KAAK,EACLvB,UAAU,OALG,E,sEAkBnB,OAAQ,6BACG,yBAAKwB,GAAG,YACN,4BAAQA,GAAG,QAAQC,SAAUvB,KAAKc,aAChC,4BAAQG,MAAM,OAAd,OACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,UAGJ,6BACE,4BAAQhB,QAASD,KAAKkB,QAAtB,WACA,4BAAQjB,QAASD,KAAKoB,QAAtB,eAEF,kBAAC,EAAD,CAAOT,QAASX,KAAKH,MAAMsB,KAAMZ,QAASP,KAAKH,MAAMwB,KAAMvB,UAAWE,KAAKH,MAAMC,iB,GA/B3EI,aCQEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c0ca2a15.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './cell.css'\n\n\nclass Cell extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      cellColor:\"white-cell\",\n      fillColor:props.fillColor + \"-cell\"\n    }\n  }\n  fillCell = () => {\n    this.setState({cellColor:this.state.fillColor})\n  }\n  render(){\n    return  <td className={this.state.cellColor} onClick={this.fillCell}></td>\n  }\n}\n\nexport default Cell\n","import React, {Component} from 'react'\nimport Cell from './cell.js'\n\nclass TableRow extends Component{\n    constructor(props){\n    \tsuper(props)\n    }\n    addCells = () => {\n    \tlet arr = [];\n    \tfor(let i = 0; i < this.props.numCols; i++){\n          arr.push(<Cell fillColor={this.props.fillColor}/>)\n    \t}\n    \treturn arr\n    }\n    render(){\n    \treturn <tr>{this.addCells()}</tr>\n    }\n}\n\nexport default TableRow\n","import React, {Component} from 'react'\nimport TableRow from './TableRow.js'\n\nclass Table extends Component{\n  constructor(props){\n  \tsuper(props)\n  }\n  fillRows = () => {\n    let arr = []\n    for(let i = 0; i < this.props.numRows; i++){\n      arr.push(<TableRow numCols={this.props.numCols} fillColor={this.props.fillColor}/>)\n    }\n    return arr\n  }\n  render(){\n\t    return <table align=\"center\"><tbody>{this.fillRows()}</tbody></table>;\n    }\n}\n\nexport default Table\n","import React, {Component} from 'react';\nimport './App.css';\nimport Table from \"./components/Table.js\"\n\nclass App extends Component{\n  constructor(props){\n  \tsuper(props)\n  \tthis.state = {\n  \t    rows:2,\n  \t    cols:2,\n  \t    fillColor:\"red\"\n\t}\n  }\n  selectColor = (event) => {\n     this.setState({fillColor:event.target.value})\n  }\n  addRow = () => {\n     this.setState({rows:this.state.rows+1})\n  }\n  addCol = () => {\n     this.setState({cols:this.state.cols+1})\n  }\n  render(){\n\treturn  <div>\n            <div id=\"dropdown\">\n              <select id=\"color\" onChange={this.selectColor}>\n                <option value=\"red\">Red</option>\n                <option value=\"green\">Green</option>\n                <option value=\"blue\">Blue</option>\n              </select>\n            </div>\n            <div>\n              <button onClick={this.addRow}>Add Row</button>\n              <button onClick={this.addCol}>Add Column</button>\n            </div>\n\t           <Table numRows={this.state.rows} numCols={this.state.cols} fillColor={this.state.fillColor}/>\n\t          </div>\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}